import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsion" {
		naveVacia.propulsar()
		assert.equals(20000, naveVacia.velocidad())

	}

	test "prepararse para el viaje"{
		assert.that(true)	

	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsarse" {
		naveConPasajeros.propulsar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}
	test "prepararse para el viaje"{
		naveConPasajeros.prepararseParaViaje()
		assert.equals(300000, naveConPasajeros.velocidad())
	}

	test "encontrar enemigos" {
		naveConPasajeros.velocidad(0)
		naveConPasajeros.encontrarEnemigo()
		assert.equals(20000, naveConPasajeros.velocidad())
		assert.that(naveConPasajeros.alarma())

		
	}



}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}

	test "prepararse para el viaje"{
		naveEnAtaque.prepararseParaViaje()
		assert.equals("Volviendo a la base", naveEnAtaque.ultimoMensaje())
		assert.equals(15000, naveEnAtaque.velocidad())

	
		naveEnReposo.prepararseParaViaje()
		assert.equals("Saliendo en mision", naveEnReposo.ultimoMensaje())	
		assert.equals(ataque, naveEnReposo.modo())
		assert.equals(15000, naveEnReposo.velocidad())
	}

}

describe "Nave de Carga Radiactiva" {

	const naveRadiactivaLlena = new NaveDeCargaRadiactiva(carga = 5000, 
		velocidad = 10000)
	
	test "nave sellada" {
		assert.notThat(naveRadiactivaLlena.sellada())
		naveRadiactivaLlena.sellarse()
		assert.that(naveRadiactivaLlena.sellada())
		naveRadiactivaLlena.recibirAmenaza()
		assert.equals(5000, naveRadiactivaLlena.carga())
		assert.equals(0, naveRadiactivaLlena.velocidad())
	}

	test "prepararse para el viaje"{
		const naveERadiactivanReposo = new NaveDeCargaRadiactiva(carga = 5000, velocidad = 0)
		assert.notThat(naveERadiactivanReposo.sellada())
		naveERadiactivanReposo.prepararseParaViaje()
		assert.that(naveERadiactivanReposo.sellada())
		assert.equals(15000, naveERadiactivanReposo.velocidad())
	}
}



